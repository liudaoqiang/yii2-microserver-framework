<?php

namespace restapi\controllers;

use common\models\Base;
use core\models\HanGreatLogger;
use Yii;
use yii\log\Logger;
use yii\web\Response;

use yii\helpers\ArrayHelper;
use yii\filters\ContentNegotiator;
use yii\filters\Cors;



class CommonController extends \yii\rest\Controller
{

    // 验证用户登录状态 TODO::rbac加入后，进行用户登录状态验证
    public $login_user_id = 1;

    public function behaviors() {
        $behaviors = parent::behaviors();

        $behaviors['contentNegotiator'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return ArrayHelper::merge([
            [
                'class' => Cors::className(),
            ],
        ], $behaviors);
    }

    public function beforeAction($action)
    {
        // 记录日志
        HanGreatLogger::resetLogIdentifier();

        $headerArray = Yii::$app->request->headers->toArray();
        $headers = '';
        foreach ($headerArray as $k => $v) {
            if (strpos($k, 'app-') === 0 || strpos($k, 'x-fb') === 0) {
                $headers .= '&'.$k.'='.$v[0];
            }
        }
        $headers = substr($headers, 1);

        $postArray = Yii::$app->request->post();
        // 日志中不记录密码
        if (array_key_exists('password', $postArray))
            $postArray['password'] = 'XXXXX';
        $posts = urldecode(http_build_query($postArray));

        $message = '---访问：'.Yii::$app->request->absoluteUrl;
        if (strlen($headers) > 0) {
            $message .= ' [Headers]'.$headers;
        }
        if (strlen($posts) > 0) {
            $message .= ' [Post]'.$posts;
        }
        // post参数也有可能以一个大的json字符串的形式发过来
        else {
            $rawBody = Yii::$app->request->getRawBody();
            if (strlen($rawBody) > 0) {
                $message .= ' [Body]' . $rawBody;
            }
        }

        HanGreatLogger::log($message);

        // 执行预检
        if($_SERVER['REQUEST_METHOD'] == "OPTIONS") {
            $result = [
                'code' => 200000,
                'ret' => [],
                'alertMsg' => '预检成功！'
            ];
            Base::sendRawData($result);
            return false;
        }

        return parent::beforeAction($action);
    }

    public function afterAction($action, $result)
    {
        // 记录一个请求执行的时间
        if (!empty(Yii::$app->session[HanGreatLogger::LOG_IDENTIFIER_TIMESTAMP])) {
            $startTime = Yii::$app->session[HanGreatLogger::LOG_IDENTIFIER_TIMESTAMP];
            $durationRequest = microtime(true) - floatval($startTime);
            $duration = microtime(true) - YII_BEGIN_TIME;

            if ($durationRequest > 2) {
                HanGreatLogger::log('上次请求共耗时 '.$duration.' ['.$durationRequest.'] 秒'."\n", Logger::LEVEL_WARNING);
            }
            else {
                HanGreatLogger::log('上次请求共耗时 '.$duration.' ['.$durationRequest.'] 秒'."\n");
            }
        }


        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

    public function debugStepByStep($msg)
    {
        // 记录一个请求执行的时间
        if (!empty(Yii::$app->session[HanGreatLogger::LOG_IDENTIFIER_TIMESTAMP])) {
            $startTime = Yii::$app->session[HanGreatLogger::LOG_IDENTIFIER_TIMESTAMP];
            $durationRequest = microtime(true) - floatval($startTime);
            $duration = microtime(true) - YII_BEGIN_TIME;

            HanGreatLogger::log('已耗时 '.$duration.' ['.$durationRequest.'] 秒'.' -'.$msg);
        }
    }

    /**
     * 发送返回结果
     * @param $data
     * @param int $code
     * @param string $msg
     * @return \yii\console\Response|Response
     */
    public function responseData($data, $code = 200000, $msg = '')
    {
        if (is_null($data)) {
            $data = [];
        }

        $result = [
            'code' => $code,
            'ret' => $data,
            'alertMsg' => $msg
        ];
        $result_crypt = null;
        return Base::sendRawData($result);
    }

    /************************************************************** 
    * 
    * 使用特定function对数组中所有元素做处理 
    * @param string &$array  要处理的字符串 
    * @param string $function 要执行的函数 
    * @return boolean $apply_to_keys_also  是否也应用到key上 
    * @access public 
    * 
    *************************************************************/  
   function arrayRecursive(&$array, $function, $apply_to_keys_also = false)  
   {  
       static $recursive_counter = 0;  
       if (++$recursive_counter > 1000) {  
           die('possible deep recursion attack');  
       }  
       foreach ($array as $key => $value) {  
           if (is_array($value)) {  
               $this->arrayRecursive($array[$key], $function, $apply_to_keys_also);  
           } else {  
               $array[$key] = $function($value);  
           }  

           if ($apply_to_keys_also && is_string($key)) {  
               $new_key = $function($key);  
               if ($new_key != $key) {  
                   $array[$new_key] = $array[$key];  
                   unset($array[$key]);  
               }  
           }  
       }  
       $recursive_counter--;  
   }  

   /************************************************************** 
    * 
    * 将数组转换为JSON字符串（兼容中文） 
    * @param array $array  要转换的数组 
    * @return string  转换得到的json字符串 
    * @access public 
    * 
    *************************************************************/  
   public function JSON($array) {  
    $this->arrayRecursive($array, 'urlencode', true);  
    $json = json_encode($array);  
    return urldecode($json);  
   }  

}
